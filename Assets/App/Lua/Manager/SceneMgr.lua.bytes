local SceneMgr = {}
SceneMgr.name = ""
SceneMgr.LoadingPanel = {}
SceneMgr.finishCb = {}
SceneMgr.loading = false
SceneMgr.oldName = ""

function SceneMgr:init()
	-- MessageMgr:LuaRegisterMessage(GameDefine.BuildInfoChange, self.BuildChangeInfo())
end

function SceneMgr:LoadScene(sceneName, loading, cb)
	ModuleName = sceneName
	self.name = sceneName
	self.finishCb = cb	
	self.loading = loading
	if loading then		
		self.LoadingPanel = UIMgr:Open("LoadingPanel", cb)
	end
	if self.oldName ~= ""  then
		C_ResManager:UnLoadAssetBundle(ResType.Scene, self.oldName)
	end
	CS.LoadSceneManager.Instance:LoadScene(sceneName, function() 
		CS.LoadSceneManager.Instance:ChangeScene(sceneName)		
		self.oldName = sceneName
	end)
end

function SceneMgr.BuildChangeInfo()
	--场景物件消息变化以后进行刷新物件的状态
end


-- function SceneMgr:UpdateProcess(args)
-- 	if self.loading then
-- 		self.LoadingPanel:UpdateProcess(args[0])
-- 	end
-- end

function SceneMgr:CurScene()
    return self.name
end

function SceneMgr:FinishScene()	

	if  not self.afterFinishCb then
		SceneMgr:CloseScene()
	else
		self.afterFinishCb(function ()
			SceneMgr:CloseScene()
		end)
	end
end

function SceneMgr:CloseScene()
	--没有loading的情况下进行回调
	if not self.loading then		
		if self.finishCb then
			self.finishCb()
		end
	else
		self.LoadingPanel:SceneFinish()
	end
end

return SceneMgr