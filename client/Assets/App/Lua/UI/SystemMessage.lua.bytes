local SystemMessageCtrl = class("SystemMessageCtrl", UIBase)
SystemMessageCtrl.view = {}


function SystemMessageCtrl:Awake(transform, agrs)
	local MessageView = require("UI/View/SystemMessageView")	
	self.agrs = agrs[0]
	self.view = MessageView:Awake(transform)
	self.view.txt_SelectService.text = ""
	-- showTable(self.agrs)
end

function SystemMessageCtrl:Start()

	if self.agrs == nil then
		self:Destroy()
	else
		self.view.txt_SelectService.text = self.agrs
		SystemMessageCtrl.view.txt_SelectService.rectTransform.anchoredPosition3D = Vector3(650,0,0)
		SystemMessageCtrl:PlayTwenn()
	end

end

function SystemMessageCtrl:PlayTwenn()

	if self.agrs == nil then
		self:Destroy()
	else
		self.view.txt_SelectService.text = self.agrs
		SystemMessageCtrl.view.txt_SelectService.rectTransform.anchoredPosition3D = Vector3(650,0,0)
		SystemMessageCtrl:PlayTwenn()
	end

	local x = self.view.txt_SelectService.preferredWidth
	local y = 0
	local z = 0
	local str = self.agrs
	local len = #str / 2
	-- error(len)

	SystemMessageCtrl.view.txt_SelectService.rectTransform:DOLocalMoveX(-x * 2 , len).OnComplete = function()
	--SetEase(CS.DG.Tweening.Ease.Linear)
	SystemMessageCtrl:Destroy()
	end

	--log("notify Show SystemMessage")

end

function SystemMessageCtrl:Destroy()
	SystemMessageCtrl:Hide(SystemMessageCtrl.view.gameObject)
end

return SystemMessageCtrl


