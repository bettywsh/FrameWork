local TextFlyingPanel = LuaClass:Class("TextFlyingPanel", UIBase)

TextFlyingPanel.TextFlyingList = nil
TextFlyingPanel.isTween = false

function TextFlyingPanel:OnOpen()
	self.view.transform:GetComponent("Canvas").sortingOrder = Enum.UILayout.TextFlying
	-- self:Fly(self.args[1])
	if self.TextFlyingList == nil then
        self.TextFlyingList = LuaStack:New()
    end
	GameUpdate:AddUpdate(self, self.OnUpdate)
end

function TextFlyingPanel:OnUpdate()
	if self.TextFlyingList.last >= self.TextFlyingList.first and not self.isTween then
		self.isTween = true
		local text = LuaStack:PopFront(self.TextFlyingList)
		self.view.txt_TextMesh.text = text
		local run = Function:AddChildren(self.view.obj_Content, self.view.img_Bg.gameObject)
		run.gameObject:SetActive(true)
		local seq = CSDefine.Sequence()
		seq:Append(run:GetComponent("RectTransform"):DOAnchorPosY(125, 1):SetRelative())
		seq:Append(run:GetComponent("CanvasGroup"):DOFade(0 , 1))
		-- seq:AppendInterval(1)
		--动画完成回调
		seq:AppendCallback(function()
			self.isTween = false
			CSDefine.GameObject.Destroy(run.gameObject)
		end)
		-- self.Seq:Play()
	end
end

--播放飘字动画 播放完成删除对应的gameObject
function TextFlyingPanel:Fly(text)
	if self.TextFlyingList == nil then
        self.TextFlyingList = LuaStack:New()
    end
	Function:ShowTable(self.TextFlyingList)
	LuaStack:PushBack(self.TextFlyingList, text)
	-- Function:ShowTable(self.TextFlyingList)
	-- self.view.txt_TextMesh.text = text
	-- local run = Function:AddChildren(self.view.obj_Content, self.view.img_Bg.gameObject)
	-- run.gameObject:SetActive(true)
	-- --生成动画序列
	-- -- local seq = CSDefine.Sequence()
	-- seq:Append(run:GetComponent("RectTransform"):DOAnchorPosY(125, 1):SetRelative())
	-- seq:Append(run:GetComponent("CanvasGroup"):DOFade(0 , 1))
	-- seq:AppendInterval(5)
	-- --动画完成回调
	-- seq:AppendCallback(function()
	-- 	CSDefine.GameObject.Destroy(run.gameObject)
	-- 	-- UIMgr.CloseSelf(self)
	-- end)
end

--隐藏UI
function TextFlyingPanel:OnClose()
end


return TextFlyingPanel