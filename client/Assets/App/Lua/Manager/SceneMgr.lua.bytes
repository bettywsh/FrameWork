local SceneMgr = {}
SceneMgr.name = ""
SceneMgr.LoadingPanel = nil
SceneMgr.finishCb = nil
SceneMgr.loading = false
SceneMgr.oldName = ""
SceneMgr.scene = nil

function SceneMgr:LoadScene(sceneName, loading, cb)
	self.name = sceneName
	if self.scene ~= nil then
		self.scene:UnLoadScene()
	end
	
	self.finishCb = cb
	self.loading = loading
	if loading then
		self.LoadingPanel = UIMgr:Open("LoadingPanel", cb)
	end
	-- if self.oldName ~= ""  then
	-- 	CSDefine.ResManager:UnLoadAssetBundle(CSDefine.ResType.Scene, self.oldName)
	-- end
	CSDefine.LoadSceneManager.Instance:LoadScene(sceneName, function()
		ResMgr:SceneUnloadAssetAsync(sceneName)
		self.scene = require("Scene/"..sceneName.."Scene")
		self.scene:LoadScene()
		self.oldName = sceneName
	end)
end

function SceneMgr.BuildChangeInfo()
	--场景物件消息变化以后进行刷新物件的状态
end


function SceneMgr:UpdateProcess(args)
	if self.loading then
		self.LoadingPanel:UpdateProcess(args[0])
	end
end

function SceneMgr:CurScene()
    return self.name
end

function SceneMgr:SceneFinish()
	--没有loading的情况下进行回调
	if self.loading then
		self.LoadingPanel:SceneFinish()
	end
	if self.finishCb then
		self.finishCb()
	end
end

return SceneMgr