local UIMgr = {}


UIMgr.UILayer = {
    SystemBox = 105
}

UIMgr.ctrls = {}
UIMgr.canvasRoot = nil
UIMgr.uiCamera = nil
UIMgr.baseCanvas = nil

function UIMgr:init()
    self.canvasRoot = CSDefine.GameObject.Find("Canvas")
    self.uiCamera = CSDefine.GameObject.Find("Canvas/UICamera").transform:GetComponent("Camera")
    self.baseCanvas = CSDefine.GameObject.Find("Canvas/UICanvas/BaseCanvas").transform
end

function UIMgr:Open(prefabName, ...)
    local args = {...}
    if self.ctrls[prefabName] == nil then
        local ctrlURL = string.format("UI/Panel/%s", prefabName)
        local ctrl = require(ctrlURL)
        self.ctrls[prefabName] = ctrl
        ResMgr:PageLoadAssetAsync(ctrl, string.format("Prefab/UI/Panel/%s.prefab", prefabName), typeof(CSDefine.GameObject), function(ugo)
            local go = CSDefine.Object.Instantiate(ugo)
            go.name = prefabName
            go.transform:SetParent(self.baseCanvas, false)
            go.transform.localScale = CSDefine.Vector3.one
            go.transform.localPosition = CSDefine.Vector3.zero
            local cv = go:AddComponent(typeof(CSDefine.Canvas))
            cv.overrideSorting = true
            go:AddComponent(typeof(CSDefine.GraphicRaycaster))
            self:OrderCanvas(go)
            ctrl:Open(go.transform, args)
            ctrl:OnOpen()
        end)
    end
    return self.ctrls[prefabName]
end

function UIMgr:OrderCanvas(go)
    for i = 0, self.baseCanvas.childCount - 1 do
        local tf = self.baseCanvas:GetChild(i)
        local canvas = tf:GetComponent(typeof(CSDefine.Canvas))
        if canvas.sortingOrder < 100 then
            local order = i * 5
            canvas.sortingOrder = order
            local cs = tf:GetComponentsInChildren(typeof(CSDefine.Canvas))
            for x = 0, cs.Length -1 do
                cs[x].sortingOrder = order + cs[x].sortingOrder
            end
            local r = go:GetComponentsInChildren(typeof(CSDefine.Renderer))
            for x = 0, r.Length -1 do
                r[x].sortingOrder = order + r[x].sortingOrder
            end
        end
    end
end

function UIMgr:Get(prefabName)
    local ctrlName = string.format("%sCtrl", prefabName)
    return self.ctrls[ctrlName]
end

function UIMgr:CloseSelf(me)
    self:Close(me.__cname)
end

function UIMgr:Close(prefabName)
    self.ctrls[prefabName]:OnClose()
    self.ctrls[prefabName]:Close()
    self.ctrls[prefabName] = nil
    CSDefine.ResManager:UnLoadAssetBundle(prefabName)
end

function UIMgr:CloseAll()
    for key, value in pairs(self.ctrls) do
        self:Close(key)
    end
end

UIMgr.AutoBindDict = {
    ["obj"] = function(go) return go end,
    ["tsf"] = function(go) return go.transform end,
    ["img"] = function(go) return assert(go:GetComponent(typeof(CSDefine.Image)), go.name) end,
    ["txt"] = function(go) return assert(go:GetComponent(typeof(CSDefine.TextMeshProUGUI)), go.name) end,
    ["btn"] = function(go) return assert(go:GetComponent(typeof(CSDefine.ButtonExt)), go.name) end,
    ["tgl"] = function(go) return assert(go:GetComponent(typeof(CSDefine.Toggle)), go.name) end,
    ["sld"] = function(go) return assert(go:GetComponent(typeof(CSDefine.Slider)), go.name) end,
    ["ipt"] = function(go) return assert(go:GetComponent(typeof(CSDefine.TMP_InputField)), go.name) end,
    ["cng"] = function(go) return assert(go:GetComponent(typeof(CSDefine.CanvasGroup)), go.name) end,
    ["lsv"] = function(go) return assert(go:GetComponent(typeof(CSDefine.ListView)), go.name) end
}

function UIMgr:AutoBind(transform)
    local view = {}
	local prefabVar = transform.gameObject:GetComponent('VarPrefab')
	local varData = prefabVar:GetVarArray()
	local iter = varData:GetEnumerator()
	while iter:MoveNext() do
		local varObj = iter.Current
		if varObj ~= nil then
            local names = Function:Split(varObj.objName, "_")
            if names[2] == nil then
                view[names[1]] = varObj.objValue
            else
                local types = Function:Split(names[1], ",")
                for i = 1, #types do
                    if self.AutoBindDict[types[i]] == nil then
                        Function:Warring(types[i].."未定义")
                    end
                
                    view[types[i].."_"..names[2]] = self.AutoBindDict[types[i]](varObj.objValue)
                end
            end
		end
	end
    return view
end

function UIMgr:CreateCell(args)
    local cell = require(args[0]).new()
    cell:Open(args[1])
    cell:OnOpen(args[2])
    return cell
end

function UIMgr:LoadAtlasSprite(atlasName, spriteName)
    local sa = CSDefine.ResManager:LoadAsset(atlasName, "Atlas/" + atlasName + ".spriteatlas", typeof(CSDefine.SpriteAtlas))
    return sa:GetSprite(spriteName)
end

return UIMgr
