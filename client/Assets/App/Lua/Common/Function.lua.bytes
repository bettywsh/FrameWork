Function = {}

function Function:UnRequire(name)
    package.loaded[name] = nil
    package.preload[name] = nil
    local lastName = self:Split(name, "/")
    _G[lastName[#lastName]] = nil
end

-- 注册CSharp消息回调函数
function Function:RegisterCSharpMessage(cls)
    for k, v in pairs(cls.class) do
        local strArr = self:Split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnCSharpMessage' then
            MessageMgr:RegisterCSharpMessage(strArr[2], function(scmd)
                v(cls, scmd)
            end)
        end
    end
end

-- 删除对象中注册的CSharp消息
function Function:RemoveCSharpMessage(cls)
    for k, v in pairs(cls.class) do
        local strArr = self:Split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnNetMessage' then
            MessageMgr:RemoveCSharpMessage(strArr[2])
        end
    end
end

-- 注册网络消息回调函数
function Function:RegisterNetMessage(cls)
    for k, v in pairs(cls.class) do
        local strArr = self:Split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnNetMessage' then
            MessageMgr:RegisterNetMessage(strArr[2], function(scmd)
                v(cls, scmd)
            end)
        end
    end
end

-- 删除对象中注册的网络协议
function Function:RemoveNetMessage(cls)
    for k, v in pairs(cls.class) do
        local strArr = self:Split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnNetMessage' then
            MessageMgr:RemoveNetMessage(strArr[2])
        end
    end
end

function Function:RegisterLuaMessage(cls)
    for k, v in pairs(cls.class) do
        local strArr = self:Split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnLuaMessage' then
            MessageMgr:RegisterLuaMessage(string.gsub(string.sub(k, 13, #k), '_', '.'), cls, v)
        end
    end
end

function Function:RemoveLuaMessage(cls)
    for k, v in pairs(cls.class) do
        local strArr = self:Split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnLuaMessage' then
            MessageMgr:RemoveLuaMessage(string.gsub(string.sub(k, 13, #k), '_', '.'), cls, v)
        end
    end
end

function Function:RegisterButtonOnClick(cls)
    for k, v in pairs(cls.class) do
        if string.sub(k, 1, 8) == 'OnClick_'  then
            local go = cls.view[string.sub(k, 9, #k)]
            if go then
                go.onClick:AddListener(function(go)
                    v(cls)
                end)
            end
        end
    end
end

function Function:Log(info)
    if GameDefine.ServerAddress.Type ~= 3 then
        CSDefine.Debug.Log(tostring(info))
    end

end

function Function:Warring(info)
    if GameDefine.ServerAddress.Type ~= 3 then
        CSDefine.Debug.LogWarning(tostring(info))
    end
end

function Function:Error(info)
    if GameDefine.ServerAddress.Type ~= 3 then
        CSDefine.Debug.LogError(tostring(info))
    end
end

function Function:UUID()
    local seed={'e','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}
    local tb={}
    for i=1,32 do
        table.insert(tb,seed[math.random(1,16)])
    end
    local sid=table.concat(tb)
    return string.format('%s-%s-%s-%s-%s',
        string.sub(sid,1,8),
        string.sub(sid,9,12),
        string.sub(sid,13,16),
        string.sub(sid,17,20),
        string.sub(sid,21,32)
    )
end

function Function:Nums(t)
    if not t then
        return 0
    end
    local count = 0
    for k, v in pairs(t) do
        count = count + 1
    end
    return count
end

function Function:Split(input, delimiter)
    input = tostring(input)
    delimiter = tostring(delimiter)
    if (delimiter == "") then return false end
    local pos, arr = 0, {}
    for st, sp in function() return string.find(input, delimiter, pos, true) end do
        table.insert(arr, string.sub(input, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(input, pos))
    return arr
end

function Function:Shallow_clone(org)
    if type(org) == "table" then
        local copy = {}
        for i, v in pairs(org) do
            copy[i] = v
        end
        return copy
    else
        return org
    end
end

function Function:Deep_clone(org)
    if type(org) == "table" then
        local copy = {}
        for i, v in next, org, nil do
            copy[self:Deep_clone(i)] = self:Deep_clone(v)
        end
        setmetatable(copy, self:Deep_clone(getmetatable(org)))
        return copy
    else
        return org
    end
end

-- 显示table表内容,show(t,"====我的表====")
function Function:ShowTable(t, logTip, color)
    if not t then
        return print((logTip and logTip or "") .. ":\n nil")
    end
    local d_type = ""
    local lua_str = ""
    -- 将table转换为json结构化字符串
    local function getJsonStrFromTable(t)
        -- 将添加指定数量的\t
        local function space_str(num)
            lua_str = ""
            for i = 1, num do
                lua_str = lua_str .. "    "
            end
            return lua_str
        end

        -- 将table转换为结构化的json字符串 @param data 数据对象 @param layer 节点层级数
        local function table_to_json_str(data, layer)
            layer = layer or 0
            local quot = "\""
            d_type = type(data)
            if d_type == "string" then
                return quot .. data .. quot
            elseif d_type == "number" then
                return tostring(data)
            elseif d_type == "boolean" then
                return tostring(data)
            elseif d_type == "userdata" then
                return tostring(data)
            elseif d_type == "table" then
                lua_str = ""
                lua_str = lua_str .. "{\n"
                local dataSize = self:Nums(data)
                local i = 1
                for k, v in pairs(data) do
                    if k == "__index" and tostring(v) == tostring(data) then
                    elseif type(k) == 'function' then
                    else
                        lua_str = lua_str .. space_str(layer + 1)
                        if v == nil then
                            lua_str = lua_str .. quot .. tostring(k) .. quot .. " : " ..
                                          table_to_json_str("", layer + 1)
                        else
                            lua_str = lua_str .. quot .. tostring(k) .. quot .. " : " .. table_to_json_str(v, layer + 1)
                        end
                        if i < dataSize then
                            lua_str = lua_str .. ",\n"
                        end
                    end
                    i = i + 1
                end
                lua_str = lua_str .. "\n" .. space_str(layer) .. "}"
                return lua_str
            elseif d_type == "function" then
                return tostring(data)
            else
                return ""
            end
        end
        local jsonStr = table_to_json_str(t, 0)
        return jsonStr
    end
    local jsonStr = getJsonStrFromTable(t)
    print((color and ("<color=" .. color .. ">") or "<color=green>") .. (logTip and logTip or "==>>showTable") ..
            ":\n</color>" .. jsonStr)
end

-- table打乱循序
function Function:TableShuffle(t)
    if type(t)~="table" then
        return
    end
    local tab={}
    local index=1
    while #t~=0 do
        local n=math.random(0,#t)
        if t[n]~=nil then
            tab[index]=t[n]
            table.remove(t,n)
            index=index+1
        end
    end
    return tab
end

function Function:GetLocalTime()
    local loaclTimer = TimerManager.Instance.ServerTimer + os.difftime(os.time(), os.time(os.date("!*t", os.time())))
    local format = os.date("!*t", loaclTimer)
    return format
end

-- 时间格式
function Function:GetTimeFormat(t)
    local format = os.date("!*t", t)
    -- error(format)
    return string.format("%02d:%02d:%02d", format.hour, format.min, format.sec)
end

function Function:GetTime(t)
    local format = os.date("!*t", t)
    return string.format("%02d:%02d", format.hour, format.min)
end

function Function:GetTimeAll(t, scmd)
    local dongTime = t + os.difftime(os.time(), os.time(os.date("!*t", os.time())))
    local format = os.date("!*t", dongTime)
    if scmd == "yue" then
        return string.format("%02d月%02d日%02d:%02d", format.month, format.day, format.hour, format.min)    
    end
    if scmd == "time" then
        return format
    end
end

function Function:GetDateFormat(t)
    local format = os.date("!*t", t)
    return string.format("%02d:%02d:%02d", (format.day - 1) * 24 + format.hour, format.min, format.sec)
end

function Function:GetTimeFormatAll(t)
    local format = os.date("!*t", t)
    if format.year > 1970 then
        return string.format("%02d年%02d月%02d日%02d:%02d:%02d", format.year - 1970, format.month - 1, format.day - 1, format.hour, format.min, format.sec)
    end
    if format.month > 1 then
        return string.format("%02d月%02d日%02d:%02d:%02d", format.month - 1, format.day - 1, format.hour, format.min, format.sec)
    end
    if format.day > 2 then
        return string.format("%02d日%02d:%02d:%02d", format.day - 1, format.hour, format.min, format.sec)
    end
    return string.format("%02d:%02d:%02d", format.hour, format.min, format.sec)
end

--指定的时间+时间偏移量
function Function:GetNewDate(interval ,dateUnit)
    local loaclTimer = TimerManager.Instance.ServerTimer + os.difftime(os.time(), os.time(os.date("!*t", os.time())))

    --根据时间单位和偏移量得到具体的偏移数据
    local ofset = 0

    if dateUnit =='DAY' then
        ofset = 60 * 60 * 24 * interval
    elseif dateUnit == 'HOUR' then
        ofset = 60 * 60 * interval
    elseif dateUnit == 'MINUTE' then
        ofset = 60 * interval
    elseif dateUnit == 'SECOND' then
        ofset = interval
    end

    local newTime = os.date("!*t", loaclTimer + tonumber(ofset))
    return newTime
end

-- 错误码
function Function:ErrorCode(scmd)
    if not TableK(TextMgr:GetAllText(), "ErrorCode_" .. scmd.Result) then
        local fly = UIMgr:Open("Common", "TextFlyingPanel");
        fly:Fly("未包含此错误码" .. "ErrorCode_" .. scmd.Result);
        return
    end
    local fly = UIMgr:Open("Common", "TextFlyingPanel");
    fly:Fly(TextMgr:GetText("ErrorCode_" .. scmd.Result));
end

---如果小数位数为0，则只保留整数
function Function:FormatNumToInt(num_para)
    local num = tonumber(num_para)
    if num <= 0 then
        return 0
    else
        local t1, t2 = math.modf(num)
        ---小数如果为0，则去掉
        if t2 > 0 then
            return num
        else
            return t1
        end
    end
end

-- 数字拆分成字符串表
function Function:GetSplitInter(num)
    local tb = {} --存放拆分的数字
    repeat
        table.insert(tb, 1, num % 10)
        num = math.floor(num / 10)
    until(num == 0)
    local strLeng = ''
    for i,v in ipairs(tb) do
        strLeng = strLeng.."<sprite="..v..">"
    end
    return strLeng
end

-- 创建对象
function Function:NewObject(prefab)
    return CSDefine.GameObject.Instantiate(prefab)
end

function Function:AddChildren(parent, children)
    local go = self:NewObject(children).transform
    self:SetParent(parent, go)
    return go
end

function Function:SetParent(parent, go)
    go:SetParent(parent.transform, false)
    go.localPosition = CSDefine.Vector3.zero
    go.localScale = CSDefine.Vector3.one
    go.localEulerAngles = CSDefine.Vector3.zero
    return go
end

-- 显示文本转美术字
function Function:GetArtTxt(str)
    local artStr = ""
    local strLen = string.len(str)
    for i = 1, strLen do
        local tempByte = string.sub(str, i, i)
        if tempByte == "+" then
            tempByte = "10"
        end
        artStr = artStr .. "<sprite=" .. tempByte .. ">"
    end
    return artStr
end

return Function