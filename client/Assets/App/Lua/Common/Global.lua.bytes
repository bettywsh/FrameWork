function UnRequire(name)
    package.loaded[name] = nil
    package.preload[name] = nil
    local lastName = string.split(name, "/")
    _G[lastName[#lastName]] = nil
end

-- 显示文本转美术字
function GetArtTxt(str)
    local artStr = ""
    local strLen = string.len(str)
    for i = 1, strLen do
        local tempByte = string.sub(str, i, i)
        if tempByte == "+" then
            tempByte = "10"
        end
        artStr = artStr .. "<sprite=" .. tempByte .. ">"
    end
    return artStr
end

-- 注册网络消息回调函数
function RegisterNetCmd(cls)
    for k, v in pairs(cls) do
        local strArr = string.split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnNetCmd' then
            MessageMgr:RegisterNetMessage(strArr[2], function(scmd)
                v(cls, scmd)
            end)
        end
    end
end

-- 删除对象中注册的网络协议
function UnRegisterNetCmd(cls)
    for k, v in pairs(cls) do
        local strArr = string.split(k, '_')
        if strArr and #strArr == 2 and strArr[1] == 'OnNetCmd' then
            MessageMgr:UnRegisterNetCmd(strArr[2])
        end
    end
end

function RegisterLuaMessage(cls)
    for k, v in pairs(cls) do
        if string.sub(k, 1, 12) == 'OnLuaNotify_' then
            MessageMgr:LuaRegisterMessage(string.gsub(string.sub(k, 13, #k), '_', '.'), cls, v)
        end
    end
end

function UnRegisterLuaMessage(cls)
    for k, v in pairs(cls) do
        local strArr = string.split(k, '_')
        if string.sub(k, 1, 12) == 'OnLuaNotify_' then
            MessageMgr:LuaUnRegisterMessage(string.gsub(string.sub(k, 13, #k), '_', '.'), cls, v)
        end
    end
end

function RegisterButtonOnClick(cls)
    if not cls.view then
        return
    end
    for k, v in pairs(cls) do
        if string.sub(k, 1, 3) == 'UI_' and string.sub(k, #k - 7, #k) == '_OnClick' then
            local go = cls.view[string.sub(k, 4, #k - 8)]
            if go then
                go.onClick:AddListener(function(go)
                    v(cls)
                end)
            end
        end
    end
end