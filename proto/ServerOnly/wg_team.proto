import "msgdef.proto";
option optimize_for=LITE_RUNTIME;

//请求队伍信息
message	GWAskTeamInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWAskTeamInfo];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
}

//响应队伍信息
message WGRetAskTeamInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGRetAskTeamInfo];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	// Return.
	required int32 Result = 4;
	optional OneTeamInfo Team = 5;
}

//请求创建队伍
message	GWCreateTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWCreateTeam];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;

}
//响应创建队伍
message	WGRetCreateTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGRetCreateTeam];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	// Return.
	required int32 Result = 4;
	optional int32 TeamID = 5;
}
//队员数据或队伍数据更新结果
message	WGTeamResult
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGTeamResult];
	// PlayerID.
	required int32 PlayerId = 2;//接收队员结果数据对象的连接者ID
	//
	required int32 Result = 3;
	required int32 TeamID = 4;	
	optional OneTeamMember OneMember = 5;
	optional sfixed64 OldGUID = 6;  //任命新队长时旧队长GUID
	optional sfixed64 NewGUID = 7;  //队长离队时新队长GUID
	//以下数据在设置队伍目标的时候才会有
	optional int32 TargetID = 8;    //目标ID
	optional bool  IsAutoMatch = 9; //是否自动匹配
	optional int32 StartLv = 10;    //起始等级
	optional int32 EndLv = 11;      //结束等级
}

//推送申请者列表
message	WGApplyerList
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGApplyerList];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	//.
	repeated OneApplyer ApplyerList = 4;
}

//推送处理申请
message	WGOpreateApplyer
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGOpreateApplyer];
	// PlayerID.
	required int32 PlayerId = 2;
	required int32 Result = 3;
	// OpreateType.
	required int32 Type = 4;
	optional OneApplyer TargetApplyer = 5;//处理申请对象
}
//请求清空申请列表
message GWCleanApplyerList
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWCleanApplyerList];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
}
//申请入队
message GWApplyTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWApplyTeam];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required int32 TeamID = 4;
}
//入队响应
message WGRetApplyTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGRetApplyTeam];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required int32 Result = 4;
}
//接受申请
message GWAcceptApplyer
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWAcceptApplyer];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required sfixed64 ApplyerGUID = 4;//申请人GUID
}
//删除申请
message GWDelApplyer
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWDelApplyer];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required sfixed64 ApplyerGUID = 4;//申请人GUID
}

//组队错误
message WGTeamError
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGTeamError];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required int32 Result = 4;
}

//邀请操作
message GWOperateInvite
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWOperateInvite];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	
	required int32 Type = 4;// TEAM_INVITE_OP_TYPE 0表示发出邀请 1表示接受邀请 2表示拒绝邀请
	optional sfixed64 TargetGUID = 5;//邀请时为被邀请者GUID;接受或拒绝时为邀请者GUID
}
//邀请通知
message WGInviteNotify
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGInviteNotify];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required sfixed64 InviterGuid = 4;//邀请人GUID
	required string InviterName = 5;//邀请人名称
}
//解散队伍
message GWDismissTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWDismissTeam];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
}
//任命队长
message GWAppointLeader
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWAppointLeader];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required sfixed64 TargetGUID = 4;//新一届队长GUID
}
//踢出队伍
message GWKickTeam
{
	optional PACKET_ID PacketId         = 1[default=PACKET_WG_TEAM_GWKickTeam];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid          = 3;
	required sfixed64 TargetGUID        = 4;//踢出者GUID
	optional TeamKickReason  KickReason = 5;
}
//离开队伍
message GWLeaveTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWLeaveTeam];
	required int32 PlayerId = 2;
	required sfixed64 CharGuid = 3;
}
//查询队友详情
message GWAskTeamMemberInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWAskTeamMemberInfo];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required sfixed64 TargetGUID = 4;//队友GUID
}
message WGRetAskTeamMemberInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGRetAskTeamMemberInfo];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	
	optional int32 MempaiID = 4;// 门派
	optional AAAWORLDPOS WorldPos = 5;//位置（坐标）
	optional int32 Level = 6;
	optional int32 VIPLevel = 7;
	optional int32 WeaponID = 8;// 武器
	optional int32 CapID = 9;	// 帽子
	optional int32 ArmourID = 10;// 衣服
	optional int32 CuffID = 11;	// 护腕
	optional int32 FootID = 12;	// 靴子
	optional int32 FaceModel	= 13;	// 脸型模型
	optional int32 HairColor	= 14;	// 头发颜色
	optional int32 HairModel	= 15;	// 头发模型
	optional int32 CombatPoint   = 16;   // 战斗力
	optional sfixed64 MemberGUID = 17;
}

//集合操作
message GWOperateGather
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWOperateGather];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	
	required int32 Type = 4;// TEAM_GATHER_OP_TYPE 0表示发出集合 1表示同意集合 2表示拒绝集合
	optional sfixed64 TargetGUID = 5;//集合时为队员GUID;接受或拒绝时为队长GUID
	optional AAAWORLDPOS LeaderWorldPos = 6;//Type = 0时有效

}
//集合通知
message WGGatherNotify
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_WGGatherNotify];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required sfixed64 GatherGuid = 4;//GUID
}

//设置队伍目标
message GWSetTeamTarget
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_TEAM_GWSetTeamTarget];
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	required int32 TeamID = 4;
	optional int32 TargetID = 5;   //目标ID
	optional bool  IsAutoMatch = 6;//是否自动匹配
	optional int32 StartLv = 7;    //起始等级
	optional int32 EndLv = 8;      //结束等级

}