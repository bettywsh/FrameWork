import "msgdef.proto";
option optimize_for=LITE_RUNTIME;
// World和Game之间的场景消息.

message	GWAskChangeScene
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_SCENE_GWAskChangeScene];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	// SourceSceneID.
	required sfixed64 SourceSceneId = 4;
	// DestSceneID.
	required sfixed64 DestSceneID = 5;
	// Key.
	required int32 Key = 6;
	// AAAWORLDPOS.
	required AAAWORLDPOS Pos = 7;
}


message WGRetChangeScene
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_SCENE_WGRetChangeScene];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	// Return.
	required CHANGESCENERETURN Ret = 4;
	// SceneID.
	required sfixed64 SceneId = 5;
	// Key.
	required int32 Key = 6;
	// AAAWORLDPOS.
	required AAAWORLDPOS Pos = 7;
}

message	GWAskTransmit
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_SCENE_GWAskTransmit];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	// SourceSceneID.
	required sfixed64 SourceSceneId = 4;
	// DestSceneID.
	required sfixed64 DestSceneID = 5;
	// Key.
	required int32 Key = 6;
	// transmitid.
	required int32 TransmitId = 7;
}


message WGRetTransmit
{
	optional PACKET_ID PacketId = 1[default=PACKET_WG_SCENE_WGRetTransmit];
	// PlayerID.
	required int32 PlayerId = 2;
	// CharGuid.
	required sfixed64 CharGuid = 3;
	// Return.
	required TransmitResult Ret = 4;
	// SceneID.
	required sfixed64 SceneId = 5;
	// Key.
	required int32 Key = 6;
	// transmitid.
	required int32 TransmitId = 7;
}

// gameserver to worldserver 
		
message GWAskChat
{
	optional PACKET_ID             PacketId      = 1 [ default=PACKET_WG_SCENE_GWAskChat];
	optional int32                 ServerId      = 2;   //server id
	optional CHAT_TYPE             ChatType      = 3 [ default = CHAT_TYPE_INVALID];
	optional string                ChatContent   = 4;  //聊天内容
	optional sfixed64              SourceGUID    = 5;  //发言者GUID
	optional sfixed64              DestGUID      = 6;  //私聊者
	optional string                DestName      = 7;  //私聊者名字
	optional int32                 GuildID       = 8;  //公会id
	optional int32                 TeamID        = 9;  //队伍id
	optional int32                 DestChannelID = 10; //频道id
	optional int32                 MenPaiID      = 11; //门派id
	optional int32                 IsItemShow    = 12; //是否是道具展示
	optional int32                 LinkIndex     = 13; //物品展示的超链接下标  -1代表第一次发送  这会服务器会把这个数据在world服务器上面缓存起来
	repeated ChatShowItemInfo      ItemList      = 14; //需要缓存的物品的信息
}


// worldserver to gameserver
// worldserver 把消息转发给各个 gameserver
message WGRetChat
{
	optional PACKET_ID             PacketId       = 1 [default=PACKET_WG_SCENE_WGRetChat];
	optional int32                 WorldChatID    = 2;
	optional CHAT_TYPE             ChatType       = 3;
	optional OPERATE_RESULT        Result         = 4;
	optional string                ChatContent    = 5;
	optional string                SourceName     = 6;
	optional int32                 SourceLevel    = 7;
	optional int32                 SourceVipLevel = 8;
	optional int32                 DestPlayerID   = 9;
	optional int32                 TeamID         = 10;
	optional int32                 GuildID        = 11;
	optional int32                 ChannelID      = 12;
	optional int32                 MenPaiID       = 13;
	optional int32                 IsItemShow     = 14;
	optional int32                 IsFirst        = 15;
	optional int32                 LinkIndex      = 16;
	repeated ChatShowItemInfo      ItemList       = 17;
}

message GWQueryInfo
{
	optional PACKET_ID     PacketId       = 1 [default=PACKET_WG_CHAT_GWQueryInfo];
	required sfixed64      SourceGUID     = 2;  //查询者GUID
	required int32         PlayerId       = 3;
	required QUERY_TYPE    Type           = 4;  
	optional string        DestName       = 5;  //目标名字
}


message WGRetQueryInfo
{
	optional PACKET_ID    PacketId       = 1 [default=PACKET_WG_CHAT_WGRetQueryInfo];
	required QUERY_TYPE   Type           = 2;
	required sfixed64     SourceGUID     = 3;  //查询者GUID
	required int32        PlayerId       = 4;	
	optional QUERY_RESULT Result         = 5 [default=QUERY_RESULT_NONE];
	optional string       CharName       = 6;
    optional int32        Level          = 7;
    optional int32        MenPai         = 8;
    optional int32        VipLevel       = 9;
}


message GWAskSynScenePlayerCount
{
	optional PACKET_ID PacketId       = 1 [default=PACKET_WG_SCENE_GWAskSynScenePlayerCount];
	required sfixed64 DestSceneID     = 2;   //到哪个场景去
}


//想从world找到这个人的GUID和场景id
message GWAskQueryPlayerDetailInfo
{
	optional PACKET_ID  PakcetId       = 1[default = PACKET_WG_MISC_GWAskQueryPlayerDetailInfo];
	optional sfixed64   SourceGUID     = 2;
	optional int32      SourcePlayerID = 3;
	optional string     DestName       = 4;
}

message WGRetQueryPlayerDetailInfo
{
	optional PACKET_ID  PakcetId       = 1[default = PACKET_WG_MISC_WGRetQueryPlayerDetailInfo];
	optional OPERATE_RESULT Result     = 2;
	optional int32      PlayerID       = 3;
	optional sfixed64   CharGUID       = 4;
	optional string     DestName       = 5;   //要查询的目标的名字
	optional sfixed64   DestGUID       = 6;   //目标的GUID
	optional int32      DestPlayerID   = 7;
	optional sfixed64   DestSceneID    = 8;   //目标所在的场景
    
}

//检测组队中玩家是否可以进入副本 
message GWAskMultiPlayerEnterCopySceneCheck
{
   optional PACKET_ID    PacketId    = 1[default=PACKET_WG_SCENE_GWAskMultiPlayerEnterCopySceneCheck];
   optional int32        TeamId      = 2;
   optional sfixed64     DestSceneId = 3;  //组队要进入的副本的场景id
   optional AAAWORLDPOS  DestPos     = 4;
}

message WGRetMultiPlayerEnterCopySceneCheck
{
	optional PACKET_ID PacketId    = 1[default=PACKET_WG_SCENE_WGRetMultiPlayerEnterCopySceneCheck];
	optional int32     PlayerId    = 2;
	optional int32     TeamId      = 3;
	optional sfixed64  DestSceneId = 4;
}

//通知其他玩家哪些在组队副本时候可以进哪些不能进
message GWMultiPlayerEnterCopySceneNotice
{
	optional PACKET_ID      PacketId    = 1[default=PACKET_WG_SCENE_GWMultiPlayerEnterCopySceneNotice];
	optional int32          TeamId      = 2;
	optional sfixed64      SelfGuid    = 3;  // 自己的guid
	optional OPERATE_RESULT Result      = 4;  // 能不能进入副本的结果
}

message WGMultiPlayerEnterCopySceneNotice
{
	optional PACKET_ID         PacketId       = 1[default=PACKET_WG_SCENE_WGMultiPlayerEnterCopySceneNotice];
    optional OPERATE_RESULT    Result         = 2;
	optional int32             PlayerID       = 3;    //要通知的玩家的playerid
    repeated MemberSimpleInfo  MemberInfoList = 4;

}

message GWAskMultiPlayerEnterCopyScene
{
	optional PACKET_ID      PacketId    = 1[default=PACKET_WG_SCENE_GWAskMultiPlayerEnterCopyScene];
    optional int32          TeamId      = 2;
}

message WGRetMultiPlayerEnterCopyScene
{
	optional PACKET_ID      PacketId    = 1[default=PACKET_WG_SCENE_WGRetMultiPlayerEnterCopyScene];
	optional int32          PlayerId    = 2;
	optional sfixed64       DestSceneId = 3;
	optional AAAWORLDPOS    DestPos     = 4;
}









