import "msgdef.proto";

option optimize_for=LITE_RUNTIME;

// 请求角色技能数据.
message CGCharAskSkillInfo
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGCharAskSkillInfo];
}



// 技能详情下发给客户端. 
message GCCharAskSkillInfo
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCharAskSkillInfo];
	repeated SkillData SkillList = 2;
}

// 技能学习请求.
message CGAskStudySkill
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskStudySkill];
	required int32	SkillID = 2;	// 技能ID
	optional int32 	IsHandy = 3;	// 是否一键升级
}

// 响应技能学习.
message GCResponseStudySkill
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCResponseStudySkill];
	required OPERATE_RESULT Result = 2;
}

// 更新新技能
message GCUpdateSkill
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCUpdateSkill];
	repeated SkillData skill = 2;
}

// 移除技能
message GCRemoveSkill
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCRemoveSkill];
	required int32 skillID = 2;
}

// 战斗状态同步.
message GCSyncCombatState
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCSyncCombatState];
	required int32 ObjID = 2;				// ObjID
	required int32 IsEnterCombatState = 3; 	// 1=进入战斗状态0=脱离战斗状态
}

//客户端发起使用技能.
message CGCharUseSkill
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGCharUseSkill];
	//使用者的ObjID.
	required int32 ObjID = 2;
	//目标的ObjID.
	required int32 ObjIDTarget = 3;
	//目标角色的Guid，应对垮场景的技能使用.
	required sfixed64 GuidTarget = 4;
	//目标坐标.
	optional AAAWORLDPOS PosTarget = 5;
	//玩家面朝的方向 围绕Y轴（范围：0~2PI）.
										//
										//    z轴正方向（0或者2PI） 
										//         \   |   /
										// 		     \ | /
										// 3/2PI  ----   ----  x轴正方向 (1/2PI)
										//           / | \
										//         /   |   \
										//             PI .
	
	required float Dir = 6;
	// 技能ID.
	required int32 SkillID = 7;
	
}

//客户端发起使用技能响应
message GCCharUseSkillResponse
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCharUseSkillResponse];
	required int32	Result = 2;
	optional int32	SkillID = 3;
}

//技能的直接效果.
message GCCharDirectImpact
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCharDirectImpact];
	//效果接受者的ID.
	required int32 ReceiverObjID = 2;
	//效果释放者的ID.
	required int32 SenderObjID =3;
	//效果释放着的逻辑记数.
	required int32 SenderLogicCount =4;
	//效果ID.
	required int32 ImpactID =5;
	//技能ID.
	required int32 SkillID= 6;

}
//技能带Buffer的发送给其他人的消息.
message GCCharBuff
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCharBuff];
	//效果接受者的ID.
	required int32 ReceiverObjID = 2;
	//效果释放者的ID.
	required int32 SenderObjID =3;
	//效果释放着的逻辑记数.
	required int32 SenderLogicCount =4;
	//BufferID.
	required int32 BuffID =5;
	//技能ID.
	required int32 SkillID= 6;
	//持续性效果的序列号.
	required int32 SN = 7;
	//是生效效果，还是消失效果.
	required int32 Enable = 8;
}

//技能给自己的Buff.
message GCDetailBuff
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCDetailBuff];
	//效果接受者的ID.
	required int32 ReceiverObjID = 2;
	//效果释放者的ID.
	required int32 SenderObjID =3;
	//效果释放着的逻辑记数.
	required int32 SenderLogicCount =4;
	//BufferID.
	required int32 BuffID =5;
	//技能ID.
	required int32 SkillID= 6;
	//持续性效果的序列号.
	required int32 SN = 7;
	//是生效效果，还是消失效果.
	
	required int32 Enable = 8;
	//效果持续的时间.
	required int32 Continuance = 9;
}

//Buff信息.
message BuffInfo
{
	required int32 BuffID = 1;
	optional int32 Continuance = 2;	// 效果持续的时间
}

//Buff数据发放给客户端.
message GCCharBuffList
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCharBuffList];
	required int32 ObjID = 2;
	repeated BuffInfo  Buff = 3;
}

// 位移效果.
message GCDriftImpact
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCDriftImpact];
	// 目标ID.
	required int32 ObjID = 2;
	// 当前位置.
	required AAAWORLDPOS CurPos = 3;
	// 位移BUFFid
	required int32 BuffID = 4;
}

//使用采集物.
message CGAskUsePlatForm
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskUsePlatForm];
	// 采集物ObjID.
	required int32 PlatFormObjID = 2;
}
//吟唱技能广播动作.
message GCCharSkillGather
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCharSkillGather];
	// 施法者ObjID.
	required int32 ObjID = 2;
	// 技能ID.
	required int32 SkillID = 3;
	// 施法者坐标.
	required AAAWORLDPOS PosCaster = 4;
	// 技能目标ObjID.
	required int32 TargetObjID = 5;
	// 技能目标坐标.
	required AAAWORLDPOS TargetPos = 6;
	// 技能目标方向.
	optional float fDir = 7;
	// 技能吟唱时间.
	required int32 ChargeTime = 8;
	// 技能等级
	optional int32 SkillLv = 9;
}

////////////////////////////////CD-BEGIN///////////////////////////////////
// CD数据.
message CooldownInfo
{
	// id.
	required int32 CooldownID 	= 1;
	// cd时长.
	required int32 CooldownTime = 2;
	// cd流逝的时长.
	optional int32 CooldownElapsed = 3;
}

// 客户端请求CD数据.
message CGAskCooldownList
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskCooldownList];
}

// 同步CD数据给客户端.
message GCAskCooldownListResponse
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCAskCooldownListResponse];
	repeated CooldownInfo CoolDInfo = 2;
}

// 更新CD给客户端.
message GCCooldownUpdate
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCCooldownUpdate];
	required CooldownInfo ColldInfo = 2;
}

// 怪物首次发现可以攻击目标通知目标
message GCMonsterAwaken
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCMonsterAwaken];
	// 目标ID.
	required int32 ObjID = 2;
}

// 使用物品
message CGUseItem
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGUseItem];
	// 物品唯一ID.
	required sfixed64 itemGuid = 2;
	// 道具模板ID
	optional int32 itemIndex = 3;
	// 使用数量
	optional int32 itemCount = 4;
}

enum USEITEM_RESULT
{
	USEITEM_INVALID 			= -1;
    USEITEM_SUCCESS            	= 0;
    USEITEM_CANNT_USE        	= 1;
    USEITEM_LEVEL_FAIL        	= 2;
    USEITEM_TYPE_FAIL        	= 3;
	USEITEM_BUSY				= 4;
    USEITEM_SKILL_FAIL        	= 5;
    USEITEM_IDENT_TARGET_TYPE_FAIL =6;
	USEITEM_BATCHUSE_RULE_ERROR =7;
	USEITEM_ITEM_NULL			=8;
	USEITEM_BATCHUSE_NUM_ERROR  =9;

}

message GCUseItemResult
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCUseItemResult];
	// 返回码
	required USEITEM_RESULT Result = 2;
}


// 请求技能玉数据
message CGAskSkillGemList
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskSkillGemList];
}

// 技能玉数据反馈给客户端
message Skill_Gem
{
	required int32	IsActive   = 1;		// 是否解锁
	repeated int32	SkillGemLv = 2;		// 技能玉等级
}

message GCSkillGemList
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCSkillGemList];
	repeated Skill_Gem SkillGem = 2;
	required int32 CurSkillGemID = 3;	// 当前佩戴的技能玉ID
}

// 请求解锁技能玉
message CGAskUnLockSkillGem
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskUnLockSkillGem];
	// 技能玉ID
	required int32 SkillGemID = 2;
}

enum UNLOCKSKILLGEM_RESULT
{
	UNLOCKSKILLGEM_ERROR 	= -1;
	UNLOCKSKILLGEM_OK  		= 0;
	UNLOCKSKILLGEM_ITEM_LACK = 1;
	UNLOCKSKILLGEM_MONEY_LACK = 2;
	UNLOCKSKILLGEM_HAS_UNLOCK = 3;
}
// 响应解锁
message GCUnLockSkillGemResponse
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCUnLockSkillGemResponse];
	// 技能玉ID
	required int32 SkillGemID = 2;
	// 错误码
	required UNLOCKSKILLGEM_RESULT Result = 3;
}

// 升级技能玉
message CGAskStudySkillGem
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskStudySkillGem];
	// 技能玉ID
	required int32 SkillGemID = 2;
	// 技能玉Index
	required int32 SkillGemIndex = 3;
}
enum STUDYSKILLGEM_RESULT
{
	STUDYSKILLGEM_ERROR = -1;
	STUDYSKILLGEM_OK  = 0;
	STUDYSKILLGEM_ITEM_LACK = 1;
	STUDYSKILLGEM_MONEY_LACK = 2;
	STUDYSKILLGEM_COPYSCENE_NOT_PASS = 3;
	STUDYSKILLGEM_LOCK	= 4;
	STUDYSKILLGEM_MAX_LV	= 5;
}
// 响应升级技能玉
message GCStudySkillGemResponse
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCStudySkillGemResponse];
	// 技能玉ID
	required int32 SkillGemID = 2;
	// 技能玉Index
	required int32 SkillGemIndex = 3;
	// 错误码
	required STUDYSKILLGEM_RESULT Result = 4;
}

// 请求佩戴技能玉
message CGAskAdornSkillGem
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskAdornSkillGem];
	// 技能玉ID
	required int32 SkillGemID = 2;
}

enum ADORNSKILLGEM_RESULT
{
	ADORNSKILLGEM_ERROR 	 = -1;
	ADORNSKILLGEM_OK		 = 0;
	ADORNSKILLGEM_NOT_UNLOCK = 1;
	ADORNSKILLGEM_HAS_ADORN	 = 2;
	ADORNSKILLGEM_CD_ERROR	 = 3;
}

// 响应配置技能玉
message GCAdornSkillGemResponse
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCAdornSkillGemResponse];
	// 技能玉ID
	required int32 SkillGemID = 2;
	// 错误码
	required ADORNSKILLGEM_RESULT Result = 3;
}

// 卸载技能玉
message CGAskUnAdornSkillGem
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGAskUnAdornSkillGem];
	// 技能玉ID
	required int32 SkillGemID = 2;
}

enum UNADORNSKILLGEM_RESULT
{
	UNADORNSKILLGEM_ERROR 	 = -1;
	UNADORNSKILLGEM_OK		 = 0;
	UNADORNSKILLGEM_NOT_ADORNS = 1;
}

// 响应卸载技能玉
message GCUnAdornSkillGemResponse
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCUnAdornSkillGemResponse];
	// 技能玉ID
	required int32 SkillGemID = 2;
	// 错误码
	required UNADORNSKILLGEM_RESULT Result = 3;
}

message CGDisableStealFunction
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_CGDisableStealFunction];
	optional int32 ImpactIndex = 2;
	optional int32 Choice =3;
}

message GCDisableStealFunction
{
	optional PACKET_ID PacketId = 1 [default=PACKET_GAME_SKILL_GCDisableStealFunction];
	optional int32 Result = 2;
}