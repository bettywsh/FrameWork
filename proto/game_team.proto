import "msgdef.proto";
option optimize_for=LITE_RUNTIME;

//请求队伍信息
message	CGAskTeamInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAskTeamInfo];
}

//响应队伍信息
message GCRetAskTeamInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetAskTeamInfo];
	//对应枚举值TEAM_ERROR
	optional int32 Result = 2;
 	optional OneTeamInfo Team = 3;
}

//请求创建队伍
message	CGCreateTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGCreateTeam];
}

//响应创建队伍
message	GCRetCreateTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetCreateTeam];
	//对应枚举值TEAM_ERROR
	optional int32 Result = 2;
	//optional int32 TeamID = 3; //去掉
}
//队伍信息变更(用来广播给周围玩家更新其外观变化)
message	GCNotifyTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCNotifyTeam];
	 //更新外观对象objid
	optional int32 ObjId = 2; 
	//对象是否有队伍（1表示有 0表示无）
	optional int32 IsHaveTeam = 3; 
	// 对象是否为队长（1表示有 0表示无）	
	optional int32 IsLeader = 4;
	// 对象所在队伍是否满（1表示有 0表示无）
	optional int32 IsFull = 5;     
 }
//队员数据更新结果
message	GCTeamResult
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCTeamResult];
	required int32 Result = 2;//对应枚举值TEAM_RESULT客户端需要根据对应值做不同处理
	optional int32 TeamID = 3;	
	optional OneTeamMember OneMember = 4;
	optional sfixed64 OldGUID = 5;  //任命新队长时旧队长GUID
	optional sfixed64 NewGUID = 6;  //队长离队时新队长GUID
	//以下数据在设置队伍目标的时候才会有
	optional int32 TargetID = 7;    //目标ID
	optional bool  IsAutoMatch = 8; //是否自动匹配
	optional int32 StartLv = 9;    //起始等级
	optional int32 EndLv = 10;      //结束等级
}

//请求入队
message CGApplyTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGApplyTeam];
	required int32 TeamID = 2;
}
//入队响应
message GCRetApplyTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetApplyTeam];
	optional int32 Result = 2; //对应枚举值TEAM_ERROR
}
//推送申请者列表
message GCApplyerList
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCApplyerList];
	repeated OneApplyer ApplyerList = 2;
}
//推送处理申请
message	GCOpreateApplyer
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCOpreateApplyer];
	// PlayerID.
	optional int32 Result = 2; //对应枚举值TEAM_ERROR
	required int32 Type = 3;//TEAM_APPLER_OP_TYPE
	optional OneApplyer TargetApplyer = 4;//处理申请对象
}
//请求清空申请列表
message	CGAskCleanApplyerList
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAskCleanApplyerList];
}
//请求接受申请
message	CGAcceptApplyer
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAcceptApplyer];
	required sfixed64 ApplyerGUID = 2;//申请人GUID
}
//请求删除申请
message	CGDelApplyer
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGDelApplyer];
	required sfixed64 ApplyerGUID = 2;//申请人GUID
}
//推送组队错误
message GCTeamError
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCTeamError];
	required int32 Result = 2; //对应枚举值TEAM_ERROR

}
//邀请操作
message CGOperateInvite
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGOperateInvite];
	required int32 Type = 2;//TEAM_INVITE_OP_TYPE 0表示发出邀请 1表示接受邀请 2表示拒绝邀请
	optional sfixed64 TargetGUID = 3;//邀请时为被邀请者GUID;接受或拒绝时为邀请者GUID
}
//邀请通知
message GCInviteNotify
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCInviteNotify];
	required sfixed64 InviterGuid = 2;//邀请人GUID
	required string InviterName = 3;//邀请人名称
}
//解散队伍
message CGDismissTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGDismissTeam];
}
//任命队长
message CGAppointLeader
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAppointLeader];
	required sfixed64 TargetGUID = 2;//新一届队长GUID
}
//踢出队伍
message CGKickTeam
{
	optional PACKET_ID       PacketId = 1[default=PACKET_GAME_TEAM_CGKickTeam];
	required sfixed64        TargetGUID = 2;   //踢出者GUID
	optional TeamKickReason  KickReason = 3;   //踢出理由 
}
//离开队伍
message CGLeaveTeam
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGLeaveTeam];
}
// 查询队员详情
message CGAskTeamMemberInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAskTeamMemberInfo];
	required sfixed64 TargetGUID = 2;
}

message GCRetAskTeamMemberInfo
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetAskTeamMemberInfo];
	optional OneTeamMember OneMember = 2;
}
// 查询附近玩家
message CGAskNearbyPlayers
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAskNearbyPlayers];
}
message GCRetAskNearbyPlayers
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetAskNearbyPlayers];
	required int32 Result = 2; //对应枚举值TEAM_ERROR
	repeated NearbyPlayer PlayerList = 3;
}
// 查询附近队伍
message CGAskNearbyTeams
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGAskNearbyTeams];
}
message GCRetAskNearbyTeams
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetAskNearbyTeams];
	required int32 Result = 2;  //对应枚举值TEAM_ERROR
	repeated NearbyTeam TeamList = 3;
}

//集合操作
message CGOperateGather
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGOperateGather];
	required int32 Type = 2;//TEAM_GATHER_OP_TYPE 0表示发出集合 1表示接受集合 2表示拒绝集合
	optional sfixed64 TargetGUID = 3;//集合时为队员GUID;接受或拒绝时为队长GUID
}
//集合通知
message GCGatherNotify
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCGatherNotify];
}

//设置队伍目标
message CGSetTeamTarget
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_CGSetTeamTarget];
	required int32 TargetID = 2;   //目标ID
	optional bool  IsAutoMatch = 3;//是否自动匹配
	optional int32 StartLv = 4;    //起始等级
	optional int32 EndLv = 5;      //结束等级
}
message GCRetSetTeamTarget
{
	optional PACKET_ID PacketId = 1[default=PACKET_GAME_TEAM_GCRetSetTeamTarget];
	required TEAM_ERROR Result = 2;
}
